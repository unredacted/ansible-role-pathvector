#!/bin/bash
# UniFi on-boot script to install Bird (bird2/bird3) and pathvector
# Auto-deployed by Ansible
# Place this file in /data/on_boot.d/ (UniFi OS) or /config/scripts/post-config.d/ (EdgeOS)
# Make it executable: chmod +x /data/on_boot.d/1-unifi-pathvector-setup.sh

# Bird Configuration Variables (templated by Ansible)
BIRD_VERSION="{{ bird_version | default('bird2') }}"
BIRD_INSTALL_FROM_OFFICIAL="{{ bird_install_from_official | default(true) | lower }}"
BIRD_GPG_KEY_URL="{{ bird_gpg_key_url | default('https://pkg.labs.nic.cz/gpg') }}"

# Pathvector Configuration Variables (templated by Ansible)
PGP_KEY_URL="{{ pathvector_pgp_key_url | default('https://repo.pathvector.io/pgp.asc') }}"
REPO_URL="{{ pathvector_repo_url | default('https://repo.pathvector.io/apt/') }}"
REPO_DIST="{{ pathvector_repo_dist | default('stable') }}"
REPO_COMPONENT="{{ pathvector_repo_component | default('main') }}"

# Script Configuration
SCRIPT_NAME="unifi-pathvector-setup"
LOG_FILE="/var/log/${SCRIPT_NAME}.log"
CONFIG_SOURCE="/data/on_boot.d/pathvector.yml"
CONFIG_DEST="{{ pathvector_config_path | default('/etc/pathvector.yml') }}"
FORCE_MODE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE_MODE=true
            shift
            ;;
        --help)
            echo "Usage: $0 [--force]"
            echo "  --force  Force update of bird and pathvector to latest versions"
            echo "           and re-add package repositories"
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Function to setup pathvector configuration
setup_pathvector_config() {
    log_message "Setting up pathvector configuration..."

    # Check if source config exists
    if [ ! -f "$CONFIG_SOURCE" ]; then
        log_message "WARNING: Source configuration file $CONFIG_SOURCE not found, skipping config setup"
        return 1
    fi

    # Copy configuration file
    log_message "Copying pathvector configuration from $CONFIG_SOURCE to $CONFIG_DEST"
    if cp "$CONFIG_SOURCE" "$CONFIG_DEST"; then
        log_message "Configuration copied successfully"

        # Generate pathvector configuration
        log_message "Running pathvector generate..."
        if pathvector generate 2>&1 | tee -a "$LOG_FILE"; then
            log_message "pathvector generate completed successfully"
            return 0
        else
            log_message "ERROR: pathvector generate failed"
            return 1
        fi
    else
        log_message "ERROR: Failed to copy configuration file"
        return 1
    fi
}

# Main Script Start
log_message "Starting $SCRIPT_NAME"
log_message "Bird version: $BIRD_VERSION, Install from official: $BIRD_INSTALL_FROM_OFFICIAL"
if [ "$FORCE_MODE" = "true" ]; then
    log_message "Running in FORCE mode - will update packages and re-add repositories"
fi

# Check if packages are already installed (skip in force mode)
if [ "$FORCE_MODE" != "true" ]; then
    if command -v pathvector >/dev/null 2>&1 && command -v bird >/dev/null 2>&1; then
        log_message "$BIRD_VERSION and pathvector are already installed"

        # Even if installed, setup configuration if it exists
        setup_pathvector_config

        log_message "$SCRIPT_NAME completed (packages already installed)"
        exit 0
    fi
else
    log_message "Force mode enabled - proceeding with repository and package updates"
fi

log_message "Installing $BIRD_VERSION and pathvector..."

# Install prerequisite packages
log_message "Installing prerequisite packages..."
DEBIAN_FRONTEND=noninteractive apt update >/dev/null 2>&1
DEBIAN_FRONTEND=noninteractive apt install -y apt-transport-https ca-certificates wget lsb-release >/dev/null 2>&1

# Get distribution codename
DISTRO_CODENAME=$(lsb_release -cs 2>/dev/null || echo "bullseye")
log_message "Detected distribution codename: $DISTRO_CODENAME"

# Setup Bird repository if using official repos
if [ "$BIRD_INSTALL_FROM_OFFICIAL" = "true" ]; then
    # Add CZ.NIC Bird repository key (force re-add in force mode)
    if [ "$FORCE_MODE" = "true" ] || ! [ -f /usr/share/keyrings/cznic-labs-pkg.gpg ]; then
        log_message "Adding CZ.NIC Bird repository key from $BIRD_GPG_KEY_URL..."
        if wget -q -O /usr/share/keyrings/cznic-labs-pkg.gpg "$BIRD_GPG_KEY_URL"; then
            log_message "CZ.NIC repository key added successfully"
        else
            log_message "ERROR: Failed to download CZ.NIC repository key from $BIRD_GPG_KEY_URL"
            exit 1
        fi
    else
        log_message "CZ.NIC repository key already exists"
    fi

    # Add Bird repository (force re-add in force mode)
    BIRD_REPO_FILE="/etc/apt/sources.list.d/cznic-labs-${BIRD_VERSION}.list"
    if [ "$FORCE_MODE" = "true" ] || ! [ -f "$BIRD_REPO_FILE" ]; then
        log_message "Adding $BIRD_VERSION repository..."
        echo "deb [signed-by=/usr/share/keyrings/cznic-labs-pkg.gpg] https://pkg.labs.nic.cz/${BIRD_VERSION} ${DISTRO_CODENAME} main" > "$BIRD_REPO_FILE"
        log_message "Bird repository added: https://pkg.labs.nic.cz/${BIRD_VERSION} ${DISTRO_CODENAME} main"
    else
        log_message "Bird repository already configured"
    fi
fi

# Add pathvector repository key (force re-add in force mode)
if [ "$FORCE_MODE" = "true" ] || ! [ -f /usr/share/keyrings/pathvector.asc ]; then
    log_message "Adding pathvector repository key from $PGP_KEY_URL..."
    if curl -fsSL "$PGP_KEY_URL" > /usr/share/keyrings/pathvector.asc; then
        log_message "Repository key added successfully"
    else
        log_message "ERROR: Failed to download repository key from $PGP_KEY_URL"
        exit 1
    fi
else
    log_message "Repository key already exists"
fi

# Add pathvector repository (force re-add in force mode)
if [ "$FORCE_MODE" = "true" ] || ! [ -f /etc/apt/sources.list.d/pathvector.list ]; then
    log_message "Adding pathvector repository..."
    echo "deb [signed-by=/usr/share/keyrings/pathvector.asc] $REPO_URL $REPO_DIST $REPO_COMPONENT" > /etc/apt/sources.list.d/pathvector.list
    log_message "Repository added: $REPO_URL $REPO_DIST $REPO_COMPONENT"
else
    log_message "Repository already configured"
fi

# Update package list
log_message "Updating package list..."
if apt update >/dev/null 2>&1; then
    log_message "Package list updated successfully"
else
    log_message "WARNING: Failed to update package list completely"
fi

# Install or update packages
if [ "$FORCE_MODE" = "true" ]; then
    log_message "Force updating pathvector and $BIRD_VERSION to latest versions..."
    # Update packages to latest version in force mode
    if DEBIAN_FRONTEND=noninteractive apt install --only-upgrade -y pathvector $BIRD_VERSION >/dev/null 2>&1; then
        log_message "Packages updated successfully"
    else
        log_message "No updates available or packages not installed yet, performing fresh install..."
        if DEBIAN_FRONTEND=noninteractive apt install -y pathvector $BIRD_VERSION >/dev/null 2>&1; then
            log_message "Installation completed successfully"
        else
            log_message "ERROR: Failed to install/update packages"
            exit 1
        fi
    fi
else
    log_message "Installing pathvector and $BIRD_VERSION..."
    if DEBIAN_FRONTEND=noninteractive apt install -y pathvector $BIRD_VERSION >/dev/null 2>&1; then
        log_message "Installation completed successfully"
    else
        log_message "ERROR: Failed to install packages"
        exit 1
    fi
fi

# Verify installation
if command -v pathvector >/dev/null 2>&1; then
    PATHVECTOR_VERSION=$(pathvector version 2>/dev/null || echo "unknown")
    log_message "pathvector installed: version $PATHVECTOR_VERSION"
else
    log_message "WARNING: pathvector command not found after installation"
fi

if command -v bird >/dev/null 2>&1; then
    BIRD_VERSION_INFO=$(bird --version 2>&1 | head -n1 || echo "unknown")
    log_message "$BIRD_VERSION installed: $BIRD_VERSION_INFO"
else
    log_message "WARNING: bird command not found after installation"
fi

# Setup pathvector configuration after successful installation
setup_pathvector_config

{% if pathvector_unifi_autostart_services | default(false) %}
# Start/restart services
log_message "Starting bird service..."
systemctl restart bird
log_message "Starting pathvector service..."
systemctl restart pathvector
{% else %}
# Optional: Start/restart services if needed
# Uncomment the following lines if you want to start the services automatically
# log_message "Starting bird service..."
# systemctl restart bird
# log_message "Starting pathvector service..."
# systemctl restart pathvector
{% endif %}

log_message "$SCRIPT_NAME completed successfully"
exit 0
